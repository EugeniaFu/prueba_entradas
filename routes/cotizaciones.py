from flask import Blueprint, render_template, request, jsonify, flash, redirect, url_for, session
from utils.db import get_db_connection
from datetime import datetime, timedelta
import json

from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
from PyPDF2 import PdfReader, PdfWriter
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from flask import send_file, current_app
from io import BytesIO
import os




cotizaciones_bp = Blueprint('cotizaciones', __name__, url_prefix='/cotizaciones')

# Definir los estados de cotizaci√≥n
ESTADOS_COTIZACION = {
    'ENVIADA': 'enviada',
    'VENCIDA': 'vencida',
    'RENTA': 'renta'
}

def generar_numero_cotizacion():
    """Genera un n√∫mero √∫nico de cotizaci√≥n"""
    conexion = get_db_connection()
    cursor = conexion.cursor()
    
    # Obtener el a√±o actual
    a√±o_actual = datetime.now().year
    
    # Buscar el √∫ltimo n√∫mero de cotizaci√≥n del a√±o
    cursor.execute("""
        SELECT numero_cotizacion 
        FROM cotizaciones 
        WHERE numero_cotizacion LIKE %s 
        ORDER BY id DESC 
        LIMIT 1
    """, (f"{a√±o_actual}%",))
    
    resultado = cursor.fetchone()
    
    if resultado:
        ultimo_numero = int(resultado[0].split('-')[1])
        nuevo_numero = ultimo_numero + 1
    else:
        nuevo_numero = 1
    
    cursor.close()
    conexion.close()
    
    return f"{a√±o_actual}-{nuevo_numero:04d}"





def verificar_cotizaciones_vencidas():
    """Actualiza autom√°ticamente las cotizaciones vencidas"""
    conexion = get_db_connection()
    cursor = conexion.cursor()
    
    try:
        # Marcar como vencidas las cotizaciones que pasaron los 7 d√≠as
        cursor.execute("""
            UPDATE cotizaciones 
            SET estado = 'vencida' 
            WHERE estado = 'enviada' 
            AND fecha_vigencia < CURDATE()
        """)
        
        conexion.commit()
        print(f"Cotizaciones vencidas actualizadas: {cursor.rowcount}")
        
    except Exception as e:
        print(f"Error al actualizar cotizaciones vencidas: {e}")
        conexion.rollback()
    finally:
        cursor.close()
        conexion.close()





def calcular_estado_vigencia(cotizacion):
    """Calcula el estado de vigencia de una cotizaci√≥n (similar a rentas)"""
    
    print(f"=== DEBUG COTIZACI√ìN {cotizacion['id']} ===")
    print(f"estado: {cotizacion['estado']}")
    print(f"fecha_vigencia: {cotizacion['fecha_vigencia']} (tipo: {type(cotizacion['fecha_vigencia'])})")
    print(f"dias_para_vencer: {cotizacion['dias_para_vencer']}")
    
    # Solo mostrar indicadores para cotizaciones ENVIADAS
    if cotizacion['estado'] != 'enviada':
        print(f"‚ùå Estado no es 'enviada': {cotizacion['estado']}")
        return None
    
    # Si no tiene fecha de vigencia, no mostrar indicador
    if not cotizacion['fecha_vigencia']:
        print("‚ùå No tiene fecha de vigencia")
        return None
    
    print("‚úÖ Pas√≥ todas las validaciones!")
    
    fecha_vigencia = cotizacion['fecha_vigencia']
    dias_para_vencer = cotizacion['dias_para_vencer']
    ahora = datetime.now()
    
    print(f"fecha_vigencia: {fecha_vigencia}")
    print(f"dias_para_vencer: {dias_para_vencer}")
    print(f"ahora: {ahora}")
    print(f"ahora.date(): {ahora.date()}")
    
    # Si ya pas√≥ la fecha de vigencia = VENCIDA
    if dias_para_vencer is not None and dias_para_vencer <= 0:
        print("üî¥ ESTADO: VENCIDA")
        return {
            'estado': 'vencida',
            'clase': 'bg-danger',
            'texto': 'Vencida'
        }
    
    # Si le quedan 3 d√≠as o menos = POR VENCER
    elif dias_para_vencer is not None and dias_para_vencer <= 3:
        print("üü° ESTADO: POR VENCER")
        return {
            'estado': 'por_vencer',
            'clase': 'bg-warning',
            'texto': f'Vence en {dias_para_vencer} d√≠a{"s" if dias_para_vencer != 1 else ""}'
        }
    
    # Si le quedan m√°s de 3 d√≠as = VIGENTE
    elif dias_para_vencer is not None and dias_para_vencer > 3:
        print("üü¢ ESTADO: VIGENTE")
        return {
            'estado': 'vigente',
            'clase': 'bg-success',
            'texto': f'{dias_para_vencer} d√≠as restantes'
        }
    
    # En cualquier otro caso, no mostrar indicador adicional
    print("‚ùå No cumple condiciones para indicador")
    return None





def calcular_precio_por_dias(producto_id, dias_renta):
    """Calcula el precio seg√∫n los d√≠as de renta"""
    conexion = get_db_connection()
    cursor = conexion.cursor()
    
    cursor.execute("""
        SELECT precio_dia, precio_7dias, precio_15dias, precio_30dias, precio_31mas
        FROM producto_precios 
        WHERE id_producto = %s
    """, (producto_id,))
    
    precios = cursor.fetchone()
    cursor.close()
    conexion.close()
    
    if not precios:
        return 0.00
    
    # L√≥gica para determinar precio seg√∫n d√≠as
    if dias_renta <= 6:
        return float(precios[0])  # precio_dia
    elif dias_renta <= 14:
        return float(precios[1])  # precio_7dias
    elif dias_renta <= 29:
        return float(precios[2])  # precio_15dias
    elif dias_renta == 30:
        return float(precios[3])  # precio_30dias
    else:
        return float(precios[4])  # precio_31mas












# En routes/cotizaciones.py, agregar estas funciones:

def generar_pdf_cotizacion_buffer(cotizacion_id):
    """Funci√≥n auxiliar para generar PDF y retornar buffer"""
    import os
    
    conexion = get_db_connection()
    cursor = conexion.cursor(dictionary=True)
    
    # Obtener datos de la cotizaci√≥n
    cursor.execute("""
        SELECT c.*, u.nombre as usuario_nombre, u.apellido1 as usuario_apellido,
               s.nombre as sucursal_nombre, s.direccion as sucursal_direccion,
               (c.fecha_creacion - INTERVAL 6 HOUR) as fecha_creacion_local
        FROM cotizaciones c
        JOIN usuarios u ON c.usuario_id = u.id
        JOIN sucursales s ON c.sucursal_id = s.id
        WHERE c.id = %s
    """, (cotizacion_id,))
    
    cotizacion = cursor.fetchone()
    
    # Obtener detalle de productos con piezas - CORREGIDO con JOIN a tabla piezas
    cursor.execute("""
        SELECT cd.*, p.nombre, p.descripcion, p.tipo, c.dias_renta,
               GROUP_CONCAT(DISTINCT CONCAT(pp.cantidad, ' ', pz.nombre_pieza) SEPARATOR ', ') as piezas
        FROM cotizacion_detalle cd
        JOIN productos p ON cd.producto_id = p.id_producto
        JOIN cotizaciones c ON cd.cotizacion_id = c.id
        LEFT JOIN producto_piezas pp ON p.id_producto = pp.id_producto
        LEFT JOIN piezas pz ON pp.id_pieza = pz.id_pieza
        WHERE cd.cotizacion_id = %s
        GROUP BY cd.id
    """, (cotizacion_id,))
    
    productos = cursor.fetchall()
    cursor.close()
    conexion.close()
    
    # --- GENERAR OVERLAY CON DATOS ---
    packet = BytesIO()
    can = canvas.Canvas(packet, pagesize=letter)
    
    # Registrar fuente Carlito
    try:
        pdfmetrics.registerFont(TTFont('Carlito', os.path.join(current_app.root_path, 'static/fonts/Carlito-Regular.ttf')))
        can.setFont("Carlito", 10)
    except:
        can.setFont("Carlito", 10)
    
    # === INFORMACI√ìN DE LA EMPRESA (PARTE SUPERIOR) ===
    can.setFont("Helvetica-Bold", 12)
    can.drawString(25, 708, "COTIZACI√ìN DE RENTA DE ANDAMIOS Y EQUIPO LIGERO")
    
    
    # Fecha y folio (lado derecho)
    # Una sola l√≠nea con formato completo
    can.setFont("Carlito", 10)
    can.drawString(482, 708, f"{cotizacion['fecha_creacion_local'].strftime('%d/%m/%Y - %H:%M:%S')}")
    
    can.setFont("Helvetica-Bold", 10)
    can.drawString(455, 680, f"COTIZACI√ìN # {cotizacion['numero_cotizacion']}")
    
    can.setFont("Carlito", 10)
    can.drawString(455, 670, f"VIGENCIA: {cotizacion['fecha_vigencia'].strftime('%d/%m/%Y')}")
    
    
    # === DATOS DEL CLIENTE (TODOS DE LA TABLA COTIZACIONES) ===
    y = 675
    can.setFont("Helvetica-Bold", 11)
    can.drawString(25, y-5, "DATOS DEL CLIENTE")
    y -= 20

    # L√≠nea separadora
    can.line(25, 668, 580, 668)
    
    can.setFont("Carlito", 10)
    # Determinar destinatario (empresa o cliente)
    if cotizacion['cliente_empresa'] and cotizacion['cliente_empresa'].strip():
        destinatario = cotizacion['cliente_empresa'].upper()
        can.drawString(25, y, f"EMPRESA: {destinatario}")
        y -= 15
        can.drawString(25, y, f"CONTACTO: {cotizacion['cliente_nombre']}")
    else:
        destinatario = cotizacion['cliente_nombre'].upper()
        can.drawString(25, y, f"CLIENTE: {destinatario}")
    
    y -= 15
    can.drawString(25, y, f"TEL√âFONO: {cotizacion['cliente_telefono']}")
    y -= 15
    can.drawString(25, y, f"EMAIL: {cotizacion['cliente_email'] or 'No proporcionado'.upper()}")
    y -= 15
    can.drawString(25, y, f"DIAS DE RENTA: {cotizacion['dias_renta']}")
    
    y -= 20
    # === SALUDO PERSONALIZADO ===
    can.setFont("Carlito", 10)
    if cotizacion['cliente_empresa'] and cotizacion['cliente_empresa'].strip():
        saludo = f"ESTIMADA EMPRESA {cotizacion['cliente_empresa'].upper()}, A CONTINUACI√ìN SE LE PRESENTA  LA COTIZACI√ìN SOLICITADA:"
    else:
        saludo = f"ESTIMADO/A {cotizacion['cliente_nombre'].upper()}, A CONTINUACI√ìN SE LE PRESENTA  LA COTIZACI√ìN SOLICITADA:"
    
    can.drawString(25, y, saludo)
    
    can.line(25, y-5, 580, y-5)  # L√≠nea separadora
    y -= 15
    # === TABLA DE PRODUCTOS ===
    can.setFont("Helvetica-Bold", 9)
    can.drawString(50, y, "PRODUCTO")
    can.drawString(330, y, "CANT.")
    can.drawString(380, y, "D√çAS")
    can.drawString(420, y, "PRECIO UNIT.")
    can.drawString(500, y, "SUBTOTAL")
    
    y -= 3
    can.line(25, y, 580, y)  # L√≠nea separadora
    y -= 15
    
    can.setFont("Carlito", 8)
    subtotal_productos = 0
    
    

    for producto in productos:

    # Guardar posici√≥n Y inicial para los datos num√©ricos
        y_inicial_producto = y
        
        # Nombre del producto
        can.setFont("Carlito", 8)
        can.drawString(25, y, producto['nombre'][:30].upper())
        y -= 8
        # Funci√≥n para dividir texto en l√≠neas
        def dividir_texto(texto, max_chars):
            palabras = texto.split()
            lineas = []
            linea_actual = ""
            
            for palabra in palabras:
                if len(linea_actual + " " + palabra) <= max_chars:
                    if linea_actual:
                        linea_actual += " " + palabra
                    else:
                        linea_actual = palabra
                else:
                    if linea_actual:
                        lineas.append(linea_actual)
                    linea_actual = palabra
            
            if linea_actual:
                lineas.append(linea_actual)
            
            return lineas
        
        # Descripci√≥n del producto con saltos de l√≠nea
        if producto['descripcion']:
            can.setFont("Carlito", 7)
            descripcion_upper = producto['descripcion'].upper()
            lineas_descripcion = dividir_texto(descripcion_upper, 75)  # M√°ximo 45 caracteres por l√≠nea
            
            for linea in lineas_descripcion:
                can.drawString(40, y, linea)
                y -= 8  # Espaciado entre l√≠neas m√°s peque√±o
        
        # Piezas SOLO si es conjunto/kit Y tiene piezas
        if producto['tipo'] == 'conjunto' and producto['piezas']:
            can.setFont("Carlito", 7)
            piezas_texto = f"INCLUYE: {producto['piezas'].upper()}"
            lineas_piezas = dividir_texto(piezas_texto, 75)
            
            for linea in lineas_piezas:
                can.drawString(40, y, linea)
                y -= 8
        
        # Datos num√©ricos alineados con el nombre del producto
        can.setFont("Carlito", 9)
        can.drawRightString(348, y_inicial_producto, str(producto['cantidad']))
        can.drawRightString(396, y_inicial_producto, str(producto['dias_renta']))
        can.drawRightString(473, y_inicial_producto, f"${producto['precio_unitario']:.2f}")
        can.drawRightString(545, y_inicial_producto, f"${producto['subtotal']:.2f}")
        
        subtotal_productos += producto['subtotal']
        y -= 7  # Espacio entre productos





    
    # Traslado si existe
    if cotizacion['requiere_traslado'] and cotizacion['costo_traslado'] > 0:
        can.setFont("Carlito", 9)
        can.drawString(25, y, f"TRASLADO {cotizacion['tipo_traslado'].upper()}")
        y -= 10
        can.setFont("Carlito", 7)
        
        # Descripci√≥n espec√≠fica seg√∫n el tipo de traslado
        if cotizacion['tipo_traslado'].lower() == 'redondo':
            descripcion_traslado = "SERVICIO DE TRASLADO DE IDA Y REGRESO DEL EQUIPO"
        else:
            cotizacion['tipo_traslado'].lower() == 'medio'
            descripcion_traslado = "SERVICIO DE TRASLADO (IDA O REGRESO SEG√öN EL CLIENTE)"
        
        
        can.drawString(40, y, descripcion_traslado)
        y -= 5
        
        can.setFont("Carlito", 9)
        can.drawRightString(348, y+3, "-")
        can.drawRightString(396, y+3, "-")
        can.drawRightString(473, y+3, "-")
        can.drawRightString(545, y+3, f"${cotizacion['costo_traslado']:.2f}")
        
    y -= 6
    # L√≠nea separadora antes de totales
    can.line(25, y, 580, y)
    y -= 15
    
    # === TOTALES ===
    can.setFont("Carlito", 10)
    can.drawString(430, y, "SUBTOTAL:")
    can.drawRightString(545, y, f"${cotizacion['subtotal']:.2f}")
    y -= 15
    
    can.drawString(430, y, "IVA (16%):")
    can.drawRightString(545, y, f"${cotizacion['iva']:.2f}")
    y -= 15
    
    can.setFont("Helvetica-Bold", 11)
    can.drawString(430, y, "TOTAL:")
    can.drawRightString(545, y, f"${cotizacion['total']:.2f}")
    y -= 10


    # ‚≠ê AGREGAR CONTROL DE P√ÅGINA NUEVA ‚≠ê
    print(f"Posici√≥n Y despu√©s de totales: {y}")  # Para debugging

    # Verificar si hay suficiente espacio para el resto del contenido
    espacio_necesario = 100 # Espacio para certificaciones, m√©todos de pago, etc.

    if y < espacio_necesario:
        print("üîÑ Creando nueva p√°gina...")
        # Crear nueva p√°gina
        can.showPage()
        y = 750  # Reiniciar Y en la nueva p√°gina
        
        # Opcional: Agregar encabezado en la nueva p√°gina
        can.setFont("Helvetica-Bold", 12)
        can.drawString(50, y, f"COTIZACI√ìN #{cotizacion['numero_cotizacion']} - CONTINUACI√ìN")
        y -= 30

    

        # === CERTIFICACIONES DE SEGURIDAD (SIN T√çTULO, SOLO ASTERISCO Y NEGRITAS) ===
    can.setFont("Helvetica-Bold", 8)  # Tama√±o un poco m√°s peque√±o y negritas
    can.drawString(50, y, "* TODOS NUESTROS EQUIPOS CUENTAN CON CERTIFICADOS DE SEGURIDAD")
    y -= 10
    can.drawString(50, y, "* LOS ANDAMIOS TIENEN CERTIFICACI√ìN QUE CUMPLE CON LA NOM-009-STPS")
    y -= 15

    # === M√âTODOS DE PAGO Y FACTURACI√ìN COMBINADOS ===
    can.setFont("Helvetica-Bold", 8)
    can.drawString(50, y, "M√âTODOS DE PAGO Y FACTURACI√ìN:")
    y -= 10

    can.setFont("Carlito", 8)
    can.drawString(60, y, "‚Ä¢ EFECTIVO, TRANSFERENCIA BANCARIA, TARJETAS DE D√âBITO Y CR√âDITO")
    y -= 10
    can.drawString(60, y, "‚Ä¢ CONTAMOS CON FACTURACI√ìN ELECTR√ìNICA")
    y -= 10

    # === REQUISITOS DEL CLIENTE (MANTENER COMO EST√Å) ===
    can.setFont("Helvetica-Bold", 8)
    can.drawString(50, y, "REQUISITOS DEL CLIENTE:")
    y -= 10

    can.setFont("Carlito", 8)
    requisitos = [
        "‚Ä¢ IDENTIFICACI√ìN OFICIAL",
        "‚Ä¢ LICENCIA DE CONDUCIR", 
        "‚Ä¢ CONSTANCIA DE SITUACI√ìN FISCAL",
        "‚Ä¢ COMPROBANTE DE DOMICILIO"
    ]

    for req in requisitos:
        can.drawString(60, y, req)
        y -= 10

    y -= 5

    # === CONDICIONES (MANTENER COMO EST√Å) ===
    can.setFont("Helvetica-Bold", 8)
    can.drawString(50, y, "CONDICIONES:")
    y -= 10

    can.setFont("Carlito", 8)
    condiciones = [
        "‚Ä¢ SE REQUIERE EL PAGO COMPLETO POR ADELANTADO",
        "‚Ä¢ UBICACI√ìN EXACTA DE LA OBRA (GOOGLE MAPS)",
        "‚Ä¢ EL PER√çODO INCLUYE DOMINGOS Y D√çAS FESTIVOS",
        "‚Ä¢ NO SE ARMA, NI SE DESARMA EL EQUIPO",
        "‚Ä¢ COTIZACI√ìN V√ÅLIDA POR 7 D√çAS"
    ]

    for cond in condiciones:
        can.drawString(60, y, cond)
        y -= 10

    y -= 10







        # === PIE DE P√ÅGINA ===
    # L√≠nea separadora antes del pie de p√°gina
    can.line(25, y+18, 580, y+18)
    y -= 1

    
    can.setFont("Helvetica-Bold", 9)
    # Calcular posici√≥n centrada manualmente
    texto1 = "ATENDIDO POR: ING. JAVIER ENRIQUE ALCOCER BERNES"
    texto2 = "GERENTE DE ANDAMIOS COLOSIO DEL ESTADO DE CAMPECHE, CAMPECHE"
    texto3 = "VISITE NUESTRA P√ÅGINA: WWW.ANDAMIOSCOLOSIO.COM"

    # Centrar texto manualmente (aproximadamente en x=300 para una p√°gina de 612 pts)
    can.drawString(173, y, texto1)
    y -= 12
    can.drawString(135, y, texto2)
    y -= 15

    # P√°gina web
    can.setFont("Helvetica-Bold", 10)
    can.drawString(160, y, texto3)

    can.save()
    packet.seek(0)
    
    # --- COMBINAR CON PLANTILLA ---
    try:
        plantilla_path = os.path.join(current_app.root_path, 'static/notas/cotizacion.pdf')
        existing_pdf = PdfReader(plantilla_path)
        output = PdfWriter()
        
        # Leer el overlay
        new_pdf = PdfReader(packet)
        
        # ‚≠ê AGREGAR TODAS LAS P√ÅGINAS DEL OVERLAY ‚≠ê
        for page_num in range(len(new_pdf.pages)):
            if page_num == 0:
                # Primera p√°gina: combinar con plantilla
                page = existing_pdf.pages[0]
                page.merge_page(new_pdf.pages[page_num])
                output.add_page(page)
            else:
                # P√°ginas adicionales: agregar solo el overlay
                output.add_page(new_pdf.pages[page_num])
        
    except Exception as e:
        print(f"Error al usar plantilla: {e}")
        # Si no hay plantilla, usar solo el overlay
        output = PdfWriter()
        new_pdf = PdfReader(packet)
        for page in new_pdf.pages:
            output.add_page(page)
    
    # Retornar buffer
    output_stream = BytesIO()
    output.write(output_stream)
    output_stream.seek(0)
    
    return output_stream


# Mantener la funci√≥n original para acceso directo
@cotizaciones_bp.route('/pdf/<int:cotizacion_id>')
def generar_pdf_cotizacion(cotizacion_id):
    """Generar PDF de cotizaci√≥n - acceso directo por URL"""
    try:
        buffer = generar_pdf_cotizacion_buffer(cotizacion_id)
        
        # Obtener n√∫mero de cotizaci√≥n para el nombre del archivo
        conexion = get_db_connection()
        cursor = conexion.cursor(dictionary=True)
        cursor.execute("SELECT numero_cotizacion FROM cotizaciones WHERE id = %s", (cotizacion_id,))
        cotizacion = cursor.fetchone()
        cursor.close()
        conexion.close()
        
        numero_cotizacion = cotizacion['numero_cotizacion'] if cotizacion else str(cotizacion_id)
        
        return send_file(
            buffer,
            download_name=f"cotizacion_{numero_cotizacion}.pdf",
            mimetype='application/pdf'
        )
        
    except Exception as e:
        print(f"Error al generar PDF: {e}")
        flash('Error al generar el PDF de la cotizaci√≥n', 'error')
        return redirect(url_for('cotizaciones.index'))














@cotizaciones_bp.route('/')
def index():
    """P√°gina principal de cotizaciones"""
    try:
        verificar_cotizaciones_vencidas()
        
        conexion = get_db_connection()
        cursor = conexion.cursor(dictionary=True)
        
        # Obtener filtros
        busqueda = request.args.get('busqueda', '')
        filtro_estado = request.args.get('filtro', '')
        
        # Query base
        query = """
            SELECT c.*, u.nombre as usuario_nombre, u.apellido1 as usuario_apellido,
                   s.nombre as sucursal_nombre,
                   DATEDIFF(c.fecha_vigencia, CURDATE()) as dias_para_vencer
            FROM cotizaciones c
            JOIN usuarios u ON c.usuario_id = u.id
            JOIN sucursales s ON c.sucursal_id = s.id
            WHERE 1=1
        """
        
        params = []
        
        if busqueda:
            query += " AND (c.numero_cotizacion LIKE %s OR c.cliente_nombre LIKE %s OR c.cliente_empresa LIKE %s)"
            busqueda_param = f"%{busqueda}%"
            params.extend([busqueda_param, busqueda_param, busqueda_param])
        
        if filtro_estado:
            query += " AND c.estado = %s"
            params.append(filtro_estado)
        
        query += " ORDER BY c.fecha_creacion DESC"
        
        cursor.execute(query, params)
        cotizaciones = cursor.fetchall()
        
        # Aplicar estado de vigencia
        cotizaciones_con_estado = []
        for cotizacion in cotizaciones:
            estado_vigencia = calcular_estado_vigencia(cotizacion)
            cotizacion_con_estado = dict(cotizacion)
            cotizacion_con_estado['estado_vigencia'] = estado_vigencia
            cotizaciones_con_estado.append(cotizacion_con_estado)
        
        # Obtener productos por cotizaci√≥n
        productos_por_cotizacion = {}
        for cotizacion in cotizaciones_con_estado:
            cursor.execute("""
                SELECT p.nombre, cd.cantidad, cd.precio_unitario, cd.subtotal
                FROM cotizacion_detalle cd
                JOIN productos p ON cd.producto_id = p.id_producto
                WHERE cd.cotizacion_id = %s
            """, (cotizacion['id'],))
            productos_por_cotizacion[cotizacion['id']] = cursor.fetchall()
        
        # Obtener productos para el modal
        cursor.execute("SELECT id_producto, nombre FROM productos WHERE estatus = 'activo'")
        productos_disponibles = cursor.fetchall()
        
        cursor.close()
        conexion.close()
        
        return render_template('cotizaciones/cotizacion.html', 
                             cotizaciones=cotizaciones_con_estado,
                             productos_por_cotizacion=productos_por_cotizacion,
                             productos=productos_disponibles)
    
    except Exception as e:
        print(f"Error en cotizaciones index: {e}")
        flash('Error al cargar las cotizaciones', 'error')
        return render_template('cotizaciones/cotizacion.html', 
                             cotizaciones=[], 
                             productos_por_cotizacion={},
                             productos=[])









@cotizaciones_bp.route('/crear', methods=['POST'])
def crear_cotizacion():
    """Crear nueva cotizaci√≥n"""
    try:
        # Obtener datos del formulario
        cliente_nombre = request.form.get('cliente_nombre')
        cliente_telefono = request.form.get('cliente_telefono')
        cliente_email = request.form.get('cliente_email', '')
        cliente_empresa = request.form.get('cliente_empresa', '')
        dias_renta = int(request.form.get('dias_renta'))
        requiere_traslado = bool(request.form.get('requiere_traslado'))
        tipo_traslado = request.form.get('tipo_traslado') if requiere_traslado else None
        costo_traslado = float(request.form.get('costo_traslado', 0)) if requiere_traslado else 0
        
        # Calcular fecha de vigencia: 7 d√≠as desde hoy
        fecha_vigencia = datetime.now() + timedelta(days=7)
        
        # Obtener productos
        productos = []
        i = 0
        while f'productos[{i}][producto_id]' in request.form:
            producto_id = int(request.form[f'productos[{i}][producto_id]'])
            cantidad = int(request.form[f'productos[{i}][cantidad]'])
            precio_unitario = float(request.form[f'productos[{i}][precio_unitario]'])
            subtotal = float(request.form[f'productos[{i}][subtotal]'])
            
            productos.append({
                'producto_id': producto_id,
                'cantidad': cantidad,
                'precio_unitario': precio_unitario,
                'subtotal': subtotal
            })
            i += 1
        
        if not productos and not requiere_traslado:
            return jsonify({'error': 'Debe agregar al menos un producto o servicio de traslado'}), 400
        
        # Calcular totales
        subtotal_productos = sum(p['subtotal'] for p in productos)
        subtotal_total = subtotal_productos + costo_traslado
        iva = subtotal_total * 0.16
        total = subtotal_total + iva
        
        # Generar n√∫mero de cotizaci√≥n
        numero_cotizacion = generar_numero_cotizacion()
        
        # Obtener usuario y sucursal de la sesi√≥n
        usuario_id = session.get('user_id')
        sucursal_id = session.get('sucursal_id')
        
        conexion = get_db_connection()
        cursor = conexion.cursor()
        
        # Insertar cotizaci√≥n
        cursor.execute("""
            INSERT INTO cotizaciones (
                numero_cotizacion, cliente_nombre, cliente_telefono, cliente_email,
                cliente_empresa, dias_renta, requiere_traslado, tipo_traslado,
                costo_traslado, subtotal, iva, total, fecha_vigencia, estado, usuario_id, sucursal_id
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            numero_cotizacion, cliente_nombre, cliente_telefono, cliente_email,
            cliente_empresa, dias_renta, requiere_traslado, tipo_traslado,
            costo_traslado, subtotal_total, iva, total, fecha_vigencia.date(), 
            'enviada', usuario_id, sucursal_id
        ))
        
        cotizacion_id = cursor.lastrowid
        
        # Insertar detalle de productos
        for producto in productos:
            cursor.execute("""
                INSERT INTO cotizacion_detalle (
                    cotizacion_id, producto_id, cantidad, precio_unitario, subtotal
                ) VALUES (%s, %s, %s, %s, %s)
            """, (
                cotizacion_id, producto['producto_id'], producto['cantidad'],
                producto['precio_unitario'], producto['subtotal']
            ))
        
        # Insertar seguimiento
        cursor.execute("""
            INSERT INTO cotizacion_seguimiento (
                cotizacion_id, estado_nuevo, comentarios, usuario_id
            ) VALUES (%s, %s, %s, %s)
        """, (cotizacion_id, 'enviada', 'Cotizaci√≥n creada y enviada', usuario_id))
        
        conexion.commit()
        cursor.close()
        conexion.close()

        # Verificar si espera JSON o redirecci√≥n
        if request.headers.get('Accept') == 'application/json':
            return jsonify({
                'success': True,
                'cotizacion_id': cotizacion_id,
                'pdf_url': url_for('cotizaciones.generar_pdf_cotizacion', cotizacion_id=cotizacion_id)
            })
        else:
            return redirect(url_for('cotizaciones.generar_pdf_cotizacion', cotizacion_id=cotizacion_id))
        
    except Exception as e:
        print(f"Error al crear cotizaci√≥n: {e}")

        if request.headers.get('Accept') == 'application/json':
            return jsonify({'success': False, 'error': 'Error al crear la cotizaci√≥n'}), 500
        else:
            return f"<h1>Error al generar la cotizaci√≥n</h1><p>{str(e)}</p><p><a href='javascript:history.back()'>Volver</a></p>", 500



        
        
        
 









@cotizaciones_bp.route('/precios/<int:producto_id>/<int:dias>')  # Cambiar de '/cotizaciones/precios/...' a '/precios/...'
def obtener_precio_producto(producto_id, dias):

    """API para obtener precio de producto seg√∫n d√≠as"""
    try:
        precio = calcular_precio_por_dias(producto_id, dias)
        return jsonify({'precio': precio})
    except Exception as e:
        return jsonify({'error': str(e)}), 500



@cotizaciones_bp.route('/<int:cotizacion_id>/cambiar-estado', methods=['POST'])  # Quitar '/cotizaciones'
def cambiar_estado_cotizacion(cotizacion_id):
 
    """Cambiar estado de una cotizaci√≥n"""
    try:
        nuevo_estado = request.json.get('estado')
        comentarios = request.json.get('comentarios', '')
        usuario_id = session.get('user_id')
        
        # Validar que el estado sea v√°lido
        if nuevo_estado not in ['enviada', 'vencida', 'renta']:
            return jsonify({'error': 'Estado no v√°lido'}), 400
        
        conexion = get_db_connection()
        cursor = conexion.cursor()
        
        # Obtener estado actual
        cursor.execute("SELECT estado FROM cotizaciones WHERE id = %s", (cotizacion_id,))
        resultado = cursor.fetchone()
        
        if not resultado:
            return jsonify({'error': 'Cotizaci√≥n no encontrada'}), 404
        
        estado_anterior = resultado[0]
        
        # Actualizar estado
        cursor.execute("""
            UPDATE cotizaciones 
            SET estado = %s 
            WHERE id = %s
        """, (nuevo_estado, cotizacion_id))
        
        # Registrar seguimiento
        cursor.execute("""
            INSERT INTO cotizacion_seguimiento (
                cotizacion_id, estado_anterior, estado_nuevo, comentarios, usuario_id
            ) VALUES (%s, %s, %s, %s, %s)
        """, (cotizacion_id, estado_anterior, nuevo_estado, comentarios, usuario_id))
        
        conexion.commit()
        cursor.close()
        conexion.close()
        
        return jsonify({'success': True, 'message': 'Estado actualizado correctamente'})
        
    except Exception as e:
        print(f"Error al cambiar estado: {e}")
        return jsonify({'error': 'Error interno del servidor'}), 500




@cotizaciones_bp.route('/<int:cotizacion_id>/convertir-renta', methods=['POST'])  # Quitar '/cotizaciones'
def convertir_cotizacion_a_renta(cotizacion_id):
 
    """Convertir cotizaci√≥n a renta"""
    try:
        # Aqu√≠ implementar√≠as la l√≥gica para crear una renta basada en la cotizaci√≥n
        # Por ahora solo cambiamos el estado
        return cambiar_estado_cotizacion(cotizacion_id)
        
    except Exception as e:
        print(f"Error al convertir cotizaci√≥n a renta: {e}")
        return jsonify({'error': 'Error interno del servidor'}), 500
    


############################################
############################### ELIMINAR COTIZACIONES
###########################################

@cotizaciones_bp.route('/<int:cotizacion_id>/eliminar', methods=['DELETE'])
def eliminar_cotizacion(cotizacion_id):
    """Eliminar cotizaci√≥n (eliminaci√≥n l√≥gica)"""
    try:
        usuario_id = session.get('user_id')
        
        conexion = get_db_connection()
        cursor = conexion.cursor()
        
        # Verificar que la cotizaci√≥n existe
        cursor.execute("SELECT numero_cotizacion FROM cotizaciones WHERE id = %s", (cotizacion_id,))
        cotizacion = cursor.fetchone()
        
        if not cotizacion:
            return jsonify({'error': 'Cotizaci√≥n no encontrada'}), 404
        
        # Eliminar detalles de productos
        cursor.execute("DELETE FROM cotizacion_detalle WHERE cotizacion_id = %s", (cotizacion_id,))
        
        # Eliminar seguimiento
        cursor.execute("DELETE FROM cotizacion_seguimiento WHERE cotizacion_id = %s", (cotizacion_id,))
        
        # Eliminar la cotizaci√≥n principal
        cursor.execute("DELETE FROM cotizaciones WHERE id = %s", (cotizacion_id,))
        
        conexion.commit()
        cursor.close()
        conexion.close()
        
        return jsonify({
            'success': True, 
            'message': f'Cotizaci√≥n {cotizacion[0]} eliminada correctamente'
        })
        
    except Exception as e:
        print(f"Error al eliminar cotizaci√≥n: {e}")
        return jsonify({'error': 'Error interno del servidor'}), 500



















 